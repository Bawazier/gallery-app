import { useState } from "react";
import Head from "next/head";
import {
  Box,
  VStack,
  Heading,
  Text,
  SimpleGrid,
  HStack,
  IconButton,
  useDisclosure,
} from "@chakra-ui/react";
import { ChevronLeftIcon } from "@chakra-ui/icons";
import { useRouter } from "next/router";
import CardPhoto from "../components/CardPhoto";
import ModalPhoto from "../components/ModalPhoto";

export default function Home(props) {
  const { photos } = props;
  const { isOpen, onOpen, onClose } = useDisclosure();
  const router = useRouter();
  const [previewPhoto, setPreviewPhoto] = useState({});

  return (
    <>
      <Head>
        <title>Gallery Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Box my={4}>
        <HStack spacing={4}>
          <IconButton
            variant="solid"
            borderRadius="full"
            colorScheme="teal"
            fontSize="28"
            size="sm"
            icon={<ChevronLeftIcon />}
            onClick={() => router.back()}
          />
          <VStack align="start" spacing="-px">
            <Heading size="xl" fontFamily="sans-serif">
              Photos
            </Heading>
            <Text fontSize="xs" color="GrayText" fontFamily="mono">
              {photos.length} items in album
            </Text>
          </VStack>
        </HStack>

        <SimpleGrid mt={4} columns={{ base: 3, md: 4 }} spacing="0.5">
          {photos.map((item) => (
            <CardPhoto
              key={item.id}
              onOpen={onOpen}
              setPreviewPhoto={setPreviewPhoto}
              {...item}
            />
          ))}
        </SimpleGrid>
      </Box>
      <ModalPhoto
        isOpen={isOpen}
        onOpen={onOpen}
        onClose={onClose}
        previewPhoto={previewPhoto}
      />
    </>
  );
}

// This function gets called at build time on server-side.
// It may be called again, on a serverless function, if
// revalidation is enabled and a new request comes in
export async function getStaticProps(context) {
  const { albumId } = context.params;
  const res = await fetch(
    `https://jsonplaceholder.typicode.com/albums/${albumId}/photos/`
  );
  const photos = await res.json();

  return {
    props: {
      photos,
    },
    // Next.js will attempt to re-generate the page:
    // - When a request comes in
    // - At most once every 100 seconds
    revalidate: 100, // In seconds
  };
}

// This function gets called at build time on server-side.
// It may be called again, on a serverless function, if
// the path has not been generated.
export async function getStaticPaths() {
  const res = await fetch("https://jsonplaceholder.typicode.com/albums");
  const albums = await res.json();

  // Get the paths we want to pre-render based on posts
  const paths = albums.map((item) => ({
    params: { albumId: item.id.toString() },
  }));

  // We'll pre-render only these paths at build time.
  // { fallback: blocking } will server-render pages
  // on-demand if the path doesn't exist.
  return { paths, fallback: "blocking" };
}
